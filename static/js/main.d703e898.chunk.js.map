{"version":3,"sources":["App.js","helperFuncs.js","serviceWorker.js","index.js"],"names":["searchClient","algoliasearch","process","Hit","hit","key","objectID","src","image","alt","className","Highlight","attribute","year","rating","result","Array","fill","i","createStar","map","icon","faStar","genre","ObjectId","actors","join","App","InstantSearch","indexName","ClearRefinements","Panel","header","RefinementList","RatingMenu","translations","ratingLabel","SearchBox","autoFocus","Hits","hitComponent","Pagination","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4WAmBMA,G,MAAeC,IACnB,aADgC,UAE7BC,sCAkCCC,EAAM,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACb,OACE,yBAAKC,IAAKD,EAAIE,UACZ,yBAAKC,IAAKH,EAAII,MAAOC,IAAI,iBACzB,yBAAKC,UAAU,SACb,kBAACC,EAAA,EAAD,CAAWP,IAAKA,EAAKQ,UAAU,UAC/B,mCAASR,EAAIS,KAAb,MAEF,6BACE,0BAAMH,UAAU,aAAhB,YChEW,SAACI,GAElB,IADA,IAAIC,EAAS,IAAIC,MAAM,GAAGC,KAAK,GACtBC,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,EAAOG,GAAK,EAEd,OAAOH,ED4DAI,CAAWf,EAAIU,QAAQM,KAAI,SAACN,GAC3B,OAAe,IAAXA,EACK,kBAAC,IAAD,CAAiBO,KAAMC,IAAQZ,UAAU,WAEzC,kBAAC,IAAD,CAAiBW,KAAMC,UAIpC,yBAAKZ,UAAU,SACb,0BAAMA,UAAU,aAAhB,UAA0C,IACzCN,EAAImB,MAAMH,KAAI,SAACG,GACd,OACE,0BAAMlB,IAAKD,EAAIoB,SAAUd,UAAU,SAChCa,OAKT,yBAAKb,UAAU,UACb,0BAAMA,UAAU,aAAhB,YACCN,EAAIqB,OAAOC,KAAK,SAKVC,EAnEH,kBACV,yBAAKjB,UAAU,OACb,gCACE,yCADF,WAGA,kBAACkB,EAAA,EAAD,CAAeC,UAAU,SAAS7B,aAAcA,GAC9C,yBAAKU,UAAU,cACb,kBAACoB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAOrB,UAAU,QAAQsB,OAAO,UAC9B,kBAACC,EAAA,EAAD,CAAgBrB,UAAU,WAE5B,kBAACmB,EAAA,EAAD,CAAOrB,UAAU,QAAQsB,OAAO,WAC9B,kBAACE,EAAA,EAAD,CACEtB,UAAU,SACVuB,aAAc,CACZC,YAAa,YAMrB,yBAAK1B,UAAU,eACb,kBAAC2B,EAAA,EAAD,CAAWC,WAAW,IACtB,yBAAK5B,UAAU,QACb,kBAAC6B,EAAA,EAAD,CAAMC,aAAcrC,KAEtB,kBAACsC,EAAA,EAAD,UErCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d703e898.chunk.js","sourcesContent":["import React from \"react\";\nimport algoliasearch from \"algoliasearch\";\nimport \"instantsearch.css/themes/algolia.css\";\nimport { createStar } from \"./helperFuncs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  InstantSearch,\n  SearchBox,\n  Hits,\n  Highlight,\n  RefinementList,\n  ClearRefinements,\n  Pagination,\n  RatingMenu,\n  Panel,\n} from \"react-instantsearch-dom\";\nimport \"./App.css\";\n\nconst searchClient = algoliasearch(\n  \"C9UPNJREQC\",\n  `${process.env.REACT_APP_API_KEY}`\n);\nconst App = () => (\n  <div className=\"app\">\n    <header>\n      <span>Algolia</span> Movies\n    </header>\n    <InstantSearch indexName=\"movies\" searchClient={searchClient}>\n      <div className=\"left-panel\">\n        <ClearRefinements />\n        <Panel className=\"panel\" header=\"Genres\">\n          <RefinementList attribute=\"genre\" />\n        </Panel>\n        <Panel className=\"panel\" header=\"Ratings\">\n          <RatingMenu\n            attribute=\"rating\"\n            translations={{\n              ratingLabel: \"& Up\",\n            }}\n          />\n        </Panel>\n      </div>\n\n      <div className=\"right-panel\">\n        <SearchBox autoFocus={true} />\n        <div className=\"hits\">\n          <Hits hitComponent={Hit} />\n        </div>\n        <Pagination />\n      </div>\n    </InstantSearch>\n  </div>\n);\n\nconst Hit = ({ hit }) => {\n  return (\n    <div key={hit.objectID}>\n      <img src={hit.image} alt=\"movie-poster\" />\n      <div className=\"title\">\n        <Highlight hit={hit} attribute=\"title\" />\n        <span> ({hit.year})</span>\n      </div>\n      <div>\n        <span className=\"subtitles\">Rating: </span>\n        {createStar(hit.rating).map((rating) => {\n          if (rating === 1) {\n            return <FontAwesomeIcon icon={faStar} className=\"filled\" />;\n          } else {\n            return <FontAwesomeIcon icon={faStar} />;\n          }\n        })}\n      </div>\n      <div className=\"genre\">\n        <span className=\"subtitles\">Genre:</span>{\" \"}\n        {hit.genre.map((genre) => {\n          return (\n            <span key={hit.ObjectId} className=\"badge\">\n              {genre}\n            </span>\n          );\n        })}\n      </div>\n      <div className=\"actors\">\n        <span className=\"subtitles\">Actors: </span>\n        {hit.actors.join(\", \")}\n      </div>\n    </div>\n  );\n};\nexport default App;\n","const createStar = (rating) => {\n  let result = new Array(5).fill(0);\n  for (let i = 0; i < rating; i++) {\n    result[i] = 1;\n  }\n  return result;\n};\n\nexport { createStar };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}